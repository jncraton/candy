import stdio
import string
import fcntl

#ifdef _WIN32
import io
#endif

byte buf[256]
byte buf_start = 255
byte buf_len = 0
byte is_preprocessor_line = false
byte is_single_quoted = false
byte is_double_quoted = false
byte literal = false
FILE* in
FILE* out

int in_regular_code():
    return not is_double_quoted and 
           not is_single_quoted and 
           not is_preprocessor_line

def fill_buffer():
    buf_len = fread(buf, 1, 254, in)

byte get_byte(byte i):
    return buf[(byte)(buf_start + i)]

def set_byte(byte i, byte val):
    buf[(byte)(buf_start + i)] = val

byte read_next_byte():
    byte tmp[2]

    if not buf_len:
        return false
    
    buf_len--
    
    if fread(tmp, 1, 1, in):
        set_byte(-1, tmp[0])
        buf_len++
    
    buf_start++

    return true

int next_indent():
    for (byte i = 0; i < 254; i++):
        if (get_byte(i) == '\n' and get_byte(i+1) != '\n'):
            byte j
            
            for (j = 0; get_byte(i + j + 1) == ' '; j++)
            return j >> 2

    return false

int is_valid_name_char(byte c):
    return (c >= 48 and c <= 57) or 
           (c >= 65 and c <= 90) or 
           (c >= 97 and c <= 122) or 
           (c == '_')

int is_separator(byte c):
    return ( c == ';' or
             c == ',' or
             c == '&' or
             //c == '+' or
             //c == '-' or
             c == '*' or
             c == '/' or
             c == '>' or
             c == '<' or
             c == '|' or
             c == '{' or
             c == '}' or
             c == ' ' or
             c == '\n' or
             c == ':')

int buf_starts_with(char* keyword):
    for (int i = 0; i < strlen(keyword); i++):
        if get_byte(i) != keyword[i]:
            return false
        
    return true

int replace_keyword(char* keyword, char* replacement):
    if not in_regular_code():
        return false
    
    if is_valid_name_char(get_byte(-1)):
        return false
    
    if is_valid_name_char(get_byte(strlen(keyword))):
        return false
    
    if !buf_starts_with(keyword):
        return false
        
    fprintf(out, replacement)
    
    for (int i = 0; i < strlen(keyword) - 1; i++):
        read_next_byte()
    
    set_byte(0, replacement[strlen(replacement) - 1])
    
    return true

def automatic_semicolon():
    if (get_byte(0) == '\n' and 
        not is_preprocessor_line and
        not is_separator(get_byte(-1))):
        fprintf(out, ";")

int do_replacements():
    return (replace_keyword(" pass", " ") or
            replace_keyword("not", "!") or
            replace_keyword("and", "&&") or
            replace_keyword("true", "(1)") or
            replace_keyword("false", "(0)") or
            replace_keyword("or", "||") or
            replace_keyword("def", "void") or
            replace_keyword("byte", "unsigned char"))

int main (int argc, char **argv):
    int line_pos = false
    byte open_braces = false
    byte indent_level = false
    byte needs_closing_paren = false
    byte needs_closing_imp = false
    in = fopen(argv[argc-2], "r")
    out = fopen(argv[argc-1], "wb")

    fill_buffer()

    while (read_next_byte()):
        if argv[argc-1][strlen(argv[argc-1]) - 1] == 'h':
            if get_byte(0) == '\n':
                if needs_closing_imp:
                    fprintf(out, ".h\"")
                    needs_closing_imp = false
                line_pos = -1
                indent_level = false

            if get_byte(0) == ' ' and line_pos == 0:
                indent_level = true
            else:
                line_pos += 1
            
            if not indent_level:
                if do_replacements():
                    pass
                else if replace_keyword(":", ";"):
                    pass
                else if replace_keyword("import", "#include"):
                    fprintf(out, " \"")
                    read_next_byte()
                    needs_closing_imp = true
                else:
                    fprintf(out, "%c", get_byte(0))
        else:
            automatic_semicolon()

            if get_byte(0) == ':' and get_byte(1) == '\n':
                if needs_closing_paren:
                    fprintf(out, ")")
                    needs_closing_paren = false
                fprintf(out, " {")
                open_braces++
            else if get_byte(0) == '\n':
                if needs_closing_imp:
                    fprintf(out, ".h\"")
                    needs_closing_imp = false
                fprintf(out, "\n")
            else if replace_keyword("if", "if ("):
                needs_closing_paren = true
            else if replace_keyword("import", "#include"):
                fprintf(out, " \"")
                read_next_byte()
                needs_closing_imp = true
                is_preprocessor_line = true
            else if get_byte(0) == '"' and in_regular_code():
                fprintf(out, "(\"")
            else if do_replacements():
                pass
            else:
                fprintf(out, "%c", get_byte(0))
            
            if not is_preprocessor_line:
                // Handle closing brace insertion
                if get_byte(0) == '\n':
                    while (open_braces and indent_level > next_indent()):
                        for (byte i = 4; i < indent_level << 2; i++):
                            fprintf(out, " ")

                        fprintf(out, "}\n")
                        indent_level--
                        open_braces--

                    indent_level = next_indent()

                if get_byte(0) == '"' and not (literal or is_single_quoted):
                    if is_double_quoted:
                        fprintf(out, ")")
                
            if get_byte(0) == '\n':
                is_preprocessor_line = false

            if get_byte(0) == '#' and in_regular_code():
                is_preprocessor_line = true

            if get_byte(0) == '\'' and not (literal or is_double_quoted):
                is_single_quoted = not is_single_quoted

            if get_byte(0) == '"' and not (literal or is_single_quoted):
                is_double_quoted = not is_double_quoted
            
            if get_byte(0) == '\\' and not literal:
                literal = true
            else:
                literal = false
            
            line_pos +=1
    
    fclose(in)
    fclose(out)
    
    return false
